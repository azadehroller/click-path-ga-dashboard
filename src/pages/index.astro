---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import MetricCard from '../components/MetricCard.astro';
import FunnelChart from '../components/FunnelChart';
import LineChart from '../components/LineChart';
import DoughnutChart from '../components/DoughnutChart';
import BarChart from '../components/BarChart';
import RadarChart from '../components/RadarChart';
import SankeyFlow from '../components/SankeyFlow';
import PathExploration from '../components/PathExploration';
import TabNavigation from '../components/TabNavigation';
import ComparisonSelector from '../components/ComparisonSelector';

import formFlowData from '../data/form-submission-flow.json';
import getStartedData from '../data/get-started-flow.json';
import navigationData from '../data/navigation-patterns.json';
import acquisitionData from '../data/user-acquisition.json';
import pathExplorationData from '../data/path-exploration.json';

const tabs = [
  { id: 'overview', label: 'Overview', icon: 'üìä' },
  { id: 'conversions', label: 'Form Conversions', icon: 'üéØ' },
  { id: 'acquisition', label: 'User Acquisition', icon: 'üìà' },
  { id: 'navigation', label: 'Navigation & Engagement', icon: 'üåê' },
  { id: 'get-started', label: '"Get Started" Page Journey', icon: 'üöÄ' },
  { id: 'comparison', label: 'Compare Metrics', icon: '‚öñÔ∏è' },
];
---

<Layout title="Roller Analytics Dashboard">
  <Header />
  
  <main class="max-w-[1800px] mx-auto px-6 py-8">
    <!-- Tab Navigation -->
    <TabNavigation client:load tabs={tabs} />

    <!-- Tab Content Container -->
    <div id="tab-content">
      
      <!-- OVERVIEW TAB -->
      <div data-tab="overview" class="tab-content">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-blue-600 rounded-full mr-3"></span>
            Key Performance Metrics
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <MetricCard 
              title="Total Visitors"
              value={acquisitionData.overview.totalUsers.toLocaleString()}
              subtitle="Unique users"
              trend="up"
              trendValue="+12.5%"
              icon="üë•"
            />
            <MetricCard 
              title="Form Conversion Rate"
              value={`${formFlowData.overview.conversionRate}%`}
              subtitle="Form completions"
              trend="up"
              trendValue="+3.2%"
              icon="üìä"
            />
            <MetricCard 
              title="Avg. Session Time"
              value={navigationData.overview.avgSessionDuration}
              subtitle="Per session"
              trend="up"
              trendValue="+8.7%"
              icon="‚è±Ô∏è"
            />
            <MetricCard 
              title="Bounce Rate"
              value={`${navigationData.overview.bounceRate}%`}
              subtitle="Exit without interaction"
              trend="down"
              trendValue="-5.3%"
              icon="üéØ"
            />
          </div>

          <!-- Quick Insights Grid -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl shadow-lg p-6 border-2 border-blue-200">
              <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <span class="text-2xl mr-2">üèÜ</span>
                Top Performing Channel
              </h3>
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-3xl font-bold text-blue-600">Display</p>
                  <p class="text-sm text-gray-600 mt-1">273,743 users (31.3% of traffic)</p>
                </div>
                <div class="text-right">
                  <p class="text-sm text-gray-500">Conversion Rate</p>
                  <p class="text-2xl font-bold text-green-600">0.44%</p>
                </div>
              </div>
            </div>

            <div class="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl shadow-lg p-6 border-2 border-green-200">
              <h3 class="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <span class="text-2xl mr-2">üéØ</span>
                Best Converting Path
              </h3>
              <div>
                <p class="text-sm text-gray-600 mb-2">Most successful user journey:</p>
                <p class="text-lg font-semibold text-gray-900">/pricing/ ‚Üí /get-started/ ‚Üí Submit</p>
                <div class="flex items-center justify-between mt-3">
                  <span class="text-sm text-gray-500">667 users</span>
                  <span class="text-2xl font-bold text-green-600">29.8% CR</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Top 5 Pages -->
          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Top Performing Pages</h3>
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
              {navigationData.topPages.slice(0, 5).map((page, idx) => (
                <div class="bg-gray-50 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div class="text-xs text-gray-500 mb-1">#{idx + 1}</div>
                  <div class="font-semibold text-gray-900 text-sm mb-2">{page.page}</div>
                  <div class="text-2xl font-bold text-blue-600">{page.visits.toLocaleString()}</div>
                  <div class="text-xs text-gray-500 mt-1">visits</div>
                  <div class="mt-2 text-xs">
                    <span class="text-gray-600">Avg. time: </span>
                    <span class="font-semibold">{page.avgTimeOnPage}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      </div>

      <!-- CONVERSIONS TAB -->
      <div data-tab="conversions" class="tab-content hidden">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-purple-600 rounded-full mr-3"></span>
            Form Submission Journey
          </h2>
          
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <MetricCard 
              title="Form Starts"
              value={formFlowData.overview.formStarts.toLocaleString()}
              subtitle={`${((formFlowData.overview.formStarts / formFlowData.overview.totalUsers) * 100).toFixed(1)}% of visitors`}
              icon="üìù"
            />
            <MetricCard 
              title="Completions"
              value={formFlowData.overview.formCompletions.toLocaleString()}
              subtitle={`${formFlowData.overview.conversionRate}% conversion`}
              icon="‚úÖ"
            />
            <MetricCard 
              title="Avg. Completion Time"
              value={formFlowData.overview.averageTimeToComplete}
              subtitle="From start to submit"
              icon="‚è≥"
            />
          </div>

          <PathExploration 
            client:load
            data={pathExplorationData.formSubmissionPaths}
            endingPoint="mql_form_submit"
            totalConversions={pathExplorationData.overview.formSubmissions}
          />

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Conversion Funnel</h3>
              <div class="h-[400px]">
                <FunnelChart 
                  client:load
                  data={formFlowData.stepByStepFlow}
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Device Performance</h3>
              <div class="h-[400px]">
                <DoughnutChart 
                  client:load
                  data={[
                    { label: `Desktop (${formFlowData.deviceBreakdown.desktop.completionRate}% CR)`, value: formFlowData.deviceBreakdown.desktop.users },
                    { label: `Mobile (${formFlowData.deviceBreakdown.mobile.completionRate}% CR)`, value: formFlowData.deviceBreakdown.mobile.users },
                    { label: `Tablet (${formFlowData.deviceBreakdown.tablet.completionRate}% CR)`, value: formFlowData.deviceBreakdown.tablet.users }
                  ]}
                />
              </div>
            </div>
          </div>

          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100 mb-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Drop-off Analysis</h3>
            <div class="h-[300px]">
              <BarChart 
                client:load
                data={formFlowData.dropOffPoints.map(point => ({
                  label: point.point.replace(' to ', ' ‚Üí '),
                  value: point.dropOff
                }))}
                color="rgba(239, 68, 68, 0.8)"
              />
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Form Field Error Rates</h3>
              <div class="h-[300px]">
                <BarChart 
                  client:load
                  data={formFlowData.fieldInteractions.map(field => ({
                    label: field.field,
                    value: field.errorRate
                  }))}
                  color="rgba(239, 68, 68, 0.8)"
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Field Completion Funnel</h3>
              <div class="h-[300px]">
                <BarChart 
                  client:load
                  data={formFlowData.fieldInteractions.map(field => ({
                    label: field.field,
                    value: field.interactions
                  }))}
                  color="rgba(59, 130, 246, 0.8)"
                />
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- ACQUISITION TAB -->
      <div data-tab="acquisition" class="tab-content hidden">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-pink-600 rounded-full mr-3"></span>
            User Acquisition Channels
          </h2>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <MetricCard 
              title="New Users"
              value={acquisitionData.overview.newUsers.toLocaleString()}
              subtitle={`${acquisitionData.overview.newUserRate}% of total`}
              icon="üÜï"
            />
            <MetricCard 
              title="Returning Users"
              value={acquisitionData.overview.returningUsers.toLocaleString()}
              subtitle="Came back"
              icon="üîÅ"
            />
            <MetricCard 
              title="Total Users"
              value={acquisitionData.overview.totalUsers.toLocaleString()}
              subtitle="All visitors"
              icon="üë•"
            />
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Traffic by Channel</h3>
              <div class="h-[400px]">
                <DoughnutChart 
                  client:load
                  data={acquisitionData.channels.slice(0, 8).map(channel => ({
                    label: channel.channel,
                    value: channel.users
                  }))}
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Conversion by Channel</h3>
              <div class="h-[400px]">
                <BarChart 
                  client:load
                  data={acquisitionData.channels.slice(0, 8).map(channel => ({
                    label: channel.channel,
                    value: channel.conversionRate
                  }))}
                  color="rgba(236, 72, 153, 0.8)"
                />
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Social Media Performance</h3>
              <div class="space-y-4">
                {acquisitionData.socialBreakdown.map((platform) => (
                  <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:shadow-md transition-shadow">
                    <div class="flex-1">
                      <p class="font-semibold text-gray-900">{platform.platform}</p>
                      <p class="text-sm text-gray-500">{platform.users.toLocaleString()} users</p>
                    </div>
                    <div class="text-right">
                      <p class="text-lg font-bold text-blue-600">{platform.conversionRate}%</p>
                      <p class="text-xs text-gray-500">conversion</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Geographic Distribution</h3>
              <div class="h-[300px]">
                <BarChart 
                  client:load
                  data={acquisitionData.geographicData.map(geo => ({
                    label: geo.country,
                    value: geo.users
                  }))}
                  color="rgba(99, 102, 241, 0.8)"
                  horizontal={true}
                />
              </div>
            </div>
          </div>

          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100 mb-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Weekly Traffic Trend</h3>
            <div class="h-[300px]">
              <LineChart 
                client:load
                data={acquisitionData.trends.weekly.map(week => ({
                  label: week.week,
                  value: week.users
                }))}
                color="rgb(236, 72, 153)"
                label="Users"
              />
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Top Referrer Websites</h3>
              <div class="h-[300px]">
                <BarChart 
                  client:load
                  data={acquisitionData.topReferrers.map(referrer => ({
                    label: referrer.source,
                    value: referrer.conversionRate
                  }))}
                  color="rgba(99, 102, 241, 0.8)"
                />
              </div>
              <div class="mt-4 space-y-2">
                {acquisitionData.topReferrers.map((referrer) => (
                  <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600">{referrer.source}</span>
                    <span class="font-semibold text-gray-900">{referrer.users.toLocaleString()} users</span>
                  </div>
                ))}
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Channel Performance Radar</h3>
              <div class="h-[400px]">
                <RadarChart 
                  client:load
                  data={acquisitionData.channels.slice(0, 6).map(channel => ({
                    label: channel.channel,
                    value: channel.conversionRate * 10
                  }))}
                />
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Bounce Rate by Channel</h3>
              <div class="h-[350px]">
                <BarChart 
                  client:load
                  data={acquisitionData.channels.slice(0, 8).map(channel => ({
                    label: channel.channel,
                    value: channel.bounceRate
                  }))}
                  color="rgba(239, 68, 68, 0.8)"
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Avg Session Duration by Channel</h3>
              <div class="h-[350px]">
                <BarChart 
                  client:load
                  data={acquisitionData.channels.slice(0, 8).map(channel => ({
                    label: channel.channel,
                    value: parseFloat(channel.avgSessionDuration.replace('m ', '.').replace('s', ''))
                  }))}
                  color="rgba(34, 197, 94, 0.8)"
                />
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- NAVIGATION TAB -->
      <div data-tab="navigation" class="tab-content hidden">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-orange-600 rounded-full mr-3"></span>
            Navigation & Engagement
          </h2>

          <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
            <MetricCard 
              title="Total Sessions"
              value={navigationData.overview.totalSessions.toLocaleString()}
              subtitle="Unique sessions"
              icon="üåê"
            />
            <MetricCard 
              title="Pages/Session"
              value={navigationData.overview.avgPagesPerSession}
              subtitle="Average views"
              icon="üìÑ"
            />
            <MetricCard 
              title="Session Duration"
              value={navigationData.overview.avgSessionDuration}
              subtitle="Average time"
              icon="‚è∞"
            />
            <MetricCard 
              title="Return Rate"
              value={`${navigationData.overview.returnVisitorRate}%`}
              subtitle="Returning visitors"
              icon="üîÑ"
            />
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Top Pages by Traffic</h3>
              <div class="h-[400px]">
                <BarChart 
                  client:load
                  data={navigationData.topPages.slice(0, 6).map(page => ({
                    label: page.page,
                    value: page.visits
                  }))}
                  color="rgba(249, 115, 22, 0.8)"
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Page Engagement Score</h3>
              <div class="h-[400px]">
                <RadarChart 
                  client:load
                  data={navigationData.topPages.slice(0, 6).map(page => ({
                    label: page.page,
                    value: 100 - page.bounceRate
                  }))}
                />
              </div>
            </div>
          </div>

          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100 mb-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">User Flow Between Pages</h3>
            <SankeyFlow 
              client:load
              data={navigationData.navigationFlow}
            />
          </div>

          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
            <h3 class="text-lg font-bold text-gray-900 mb-4">High-Converting User Paths</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {navigationData.mostCommonPaths.map((pathData, idx) => (
                <div class="relative bg-gradient-to-br from-indigo-50 to-purple-50 rounded-lg p-6 border-2 border-indigo-200 hover:shadow-lg transition-shadow">
                  <div class="absolute top-3 right-3 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
                    #{idx + 1}
                  </div>
                  <h4 class="font-semibold text-gray-900 mb-3 pr-10">Journey</h4>
                  <div class="space-y-2 mb-4">
                    {pathData.path.split(' ‚Üí ').map((step) => (
                      <div class="flex items-center">
                        <div class="w-2 h-2 bg-indigo-600 rounded-full mr-2"></div>
                        <span class="text-sm text-gray-700">{step}</span>
                      </div>
                    ))}
                  </div>
                  <div class="border-t border-indigo-200 pt-3 flex justify-between">
                    <div>
                      <p class="text-xs text-gray-500">Users</p>
                      <p class="text-lg font-bold text-indigo-600">{pathData.users.toLocaleString()}</p>
                    </div>
                    <div class="text-right">
                      <p class="text-xs text-gray-500">Conv.</p>
                      <p class="text-lg font-bold text-green-600">{pathData.conversionRate}%</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Homepage Scroll Depth</h3>
              <div class="h-[300px]">
                <LineChart 
                  client:load
                  data={[
                    { label: '0-25%', value: navigationData.scrollDepth.homepage['0-25%'] },
                    { label: '25-50%', value: navigationData.scrollDepth.homepage['25-50%'] },
                    { label: '50-75%', value: navigationData.scrollDepth.homepage['50-75%'] },
                    { label: '75-100%', value: navigationData.scrollDepth.homepage['75-100%'] }
                  ]}
                  color="rgb(249, 115, 22)"
                  label="Users"
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Features Page Scroll</h3>
              <div class="h-[300px]">
                <LineChart 
                  client:load
                  data={[
                    { label: '0-25%', value: navigationData.scrollDepth.features['0-25%'] },
                    { label: '25-50%', value: navigationData.scrollDepth.features['25-50%'] },
                    { label: '50-75%', value: navigationData.scrollDepth.features['50-75%'] },
                    { label: '75-100%', value: navigationData.scrollDepth.features['75-100%'] }
                  ]}
                  color="rgb(59, 130, 246)"
                  label="Users"
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Pricing Page Scroll</h3>
              <div class="h-[300px]">
                <LineChart 
                  client:load
                  data={[
                    { label: '0-25%', value: navigationData.scrollDepth.pricing['0-25%'] },
                    { label: '25-50%', value: navigationData.scrollDepth.pricing['25-50%'] },
                    { label: '50-75%', value: navigationData.scrollDepth.pricing['50-75%'] },
                    { label: '75-100%', value: navigationData.scrollDepth.pricing['75-100%'] }
                  ]}
                  color="rgb(139, 92, 246)"
                  label="Users"
                />
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Click Heatmap - Most Clicked Elements</h3>
              <div class="h-[350px]">
                <BarChart 
                  client:load
                  data={navigationData.clickHeatmap.map(item => ({
                    label: item.element,
                    value: item.clicks
                  }))}
                  color="rgba(249, 115, 22, 0.8)"
                  horizontal={true}
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Exit Rate by Page</h3>
              <div class="h-[350px]">
                <BarChart 
                  client:load
                  data={navigationData.topPages.map(page => ({
                    label: page.page,
                    value: page.exitRate
                  }))}
                  color="rgba(239, 68, 68, 0.8)"
                />
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- GET STARTED TAB -->
      <div data-tab="get-started" class="tab-content hidden">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-green-600 rounded-full mr-3"></span>
            "Get Started" Page Journey
          </h2>

          <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
            <MetricCard 
              title="Page Visits"
              value={getStartedData.overview.reachedGetStarted.toLocaleString()}
              subtitle={`${((getStartedData.overview.reachedGetStarted / getStartedData.overview.totalVisitors) * 100).toFixed(1)}% reached`}
              icon="üöÄ"
            />
            <MetricCard 
              title="Onboarding Starts"
              value={getStartedData.overview.startedOnboarding.toLocaleString()}
              subtitle="User registrations"
              icon="üë§"
            />
            <MetricCard 
              title="Completions"
              value={getStartedData.overview.completedOnboarding.toLocaleString()}
              subtitle={`${getStartedData.overview.conversionRate}% conversion`}
              icon="üéâ"
            />
            <MetricCard 
              title="Avg. Time"
              value={getStartedData.overview.avgTimeToGetStarted}
              subtitle="To reach page"
              icon="‚åõ"
            />
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Top Entry Paths</h3>
              <div class="h-[400px]">
                <BarChart 
                  client:load
                  data={getStartedData.pathAnalysis.map(path => ({
                    label: path.path.split(' ‚Üí ')[0],
                    value: path.users
                  }))}
                  color="rgba(34, 197, 94, 0.8)"
                  horizontal={true}
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Conversion Steps</h3>
              <div class="h-[400px]">
                <FunnelChart 
                  client:load
                  data={getStartedData.userJourneySteps.map(step => ({
                    step: step.step,
                    users: step.users,
                    percentage: step.completionRate
                  }))}
                />
              </div>
            </div>
          </div>

          <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100 mb-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Best Performing CTAs</h3>
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
              {getStartedData.topReferringSections.map((section) => (
                <div class="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200 hover:shadow-lg transition-shadow">
                  <p class="text-sm font-medium text-gray-600">{section.section}</p>
                  <p class="text-2xl font-bold text-blue-600 mt-2">{section.conversionRate}%</p>
                  <p class="text-xs text-gray-500 mt-1">{section.clicks.toLocaleString()} clicks</p>
                </div>
              ))}
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Time to Conversion Distribution</h3>
              <div class="h-[350px]">
                <DoughnutChart 
                  client:load
                  data={getStartedData.timeToConversion.map(item => ({
                    label: `${item.range} (${item.percentage}%)`,
                    value: item.users
                  }))}
                />
              </div>
            </div>

            <div class="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
              <h3 class="text-lg font-bold text-gray-900 mb-4">Average Journey Time by Entry Path</h3>
              <div class="h-[350px]">
                <BarChart 
                  client:load
                  data={getStartedData.pathAnalysis.map(path => ({
                    label: path.path.split(' ‚Üí ')[0],
                    value: parseFloat(path.avgTime.replace('m ', '.').replace('s', ''))
                  }))}
                  color="rgba(34, 197, 94, 0.8)"
                  horizontal={true}
                />
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- COMPARISON TAB -->
      <div data-tab="comparison" class="tab-content hidden">
        <section class="mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="w-1 h-8 bg-violet-600 rounded-full mr-3"></span>
            Compare Metrics
          </h2>

          <div class="grid grid-cols-1 gap-6 mb-6">
            <!-- Channel Comparison -->
            <ComparisonSelector
              client:load
              title="üîÑ Channel Comparison"
              items={acquisitionData.channels.slice(0, 10).map(channel => ({
                id: channel.channel,
                label: channel.channel,
                metrics: {
                  users: channel.users,
                  conversionRate: channel.conversionRate,
                  bounceRate: channel.bounceRate,
                  avgSessionDuration: parseFloat(channel.avgSessionDuration.replace('m ', '.').replace('s', '')),
                  newUsers: channel.newUsers,
                  returningUsers: channel.returningUsers
                }
              }))}
              metricDefinitions={[
                { key: 'users', label: 'Total Users', format: 'number' },
                { key: 'conversionRate', label: 'Conversion Rate', format: 'percentage' },
                { key: 'bounceRate', label: 'Bounce Rate', format: 'percentage' },
                { key: 'avgSessionDuration', label: 'Avg Session Duration (min)', format: 'number' },
                { key: 'newUsers', label: 'New Users', format: 'number' },
                { key: 'returningUsers', label: 'Returning Users', format: 'number' }
              ]}
              maxSelections={6}
            />

            <!-- Page Performance Comparison -->
            <ComparisonSelector
              client:load
              title="üìÑ Page Performance Comparison"
              items={navigationData.topPages.map(page => ({
                id: page.page,
                label: page.page,
                metrics: {
                  visits: page.visits,
                  bounceRate: page.bounceRate,
                  exitRate: page.exitRate,
                  avgTimeOnPage: parseFloat(page.avgTimeOnPage.replace('m ', '.').replace('s', ''))
                }
              }))}
              metricDefinitions={[
                { key: 'visits', label: 'Total Visits', format: 'number' },
                { key: 'bounceRate', label: 'Bounce Rate', format: 'percentage' },
                { key: 'exitRate', label: 'Exit Rate', format: 'percentage' },
                { key: 'avgTimeOnPage', label: 'Avg Time on Page (min)', format: 'number' }
              ]}
              maxSelections={6}
            />

            <!-- Device Comparison -->
            <ComparisonSelector
              client:load
              title="üì± Device Performance Comparison"
              items={[
                {
                  id: 'desktop',
                  label: 'Desktop',
                  metrics: {
                    users: formFlowData.deviceBreakdown.desktop.users,
                    completionRate: formFlowData.deviceBreakdown.desktop.completionRate
                  }
                },
                {
                  id: 'mobile',
                  label: 'Mobile',
                  metrics: {
                    users: formFlowData.deviceBreakdown.mobile.users,
                    completionRate: formFlowData.deviceBreakdown.mobile.completionRate
                  }
                },
                {
                  id: 'tablet',
                  label: 'Tablet',
                  metrics: {
                    users: formFlowData.deviceBreakdown.tablet.users,
                    completionRate: formFlowData.deviceBreakdown.tablet.completionRate
                  }
                }
              ]}
              metricDefinitions={[
                { key: 'users', label: 'Total Users', format: 'number' },
                { key: 'completionRate', label: 'Completion Rate', format: 'percentage' }
              ]}
              maxSelections={3}
            />

            <!-- Geographic Comparison -->
            <ComparisonSelector
              client:load
              title="üåç Geographic Performance Comparison"
              items={acquisitionData.geographicData.map(geo => ({
                id: geo.country,
                label: geo.country,
                metrics: {
                  users: geo.users,
                  percentage: geo.percentage,
                  conversionRate: geo.conversionRate
                }
              }))}
              metricDefinitions={[
                { key: 'users', label: 'Total Users', format: 'number' },
                { key: 'percentage', label: 'Traffic Share', format: 'percentage' },
                { key: 'conversionRate', label: 'Conversion Rate', format: 'percentage' }
              ]}
              maxSelections={6}
            />

            <!-- Social Platform Comparison -->
            <ComparisonSelector
              client:load
              title="üì± Social Platform Comparison"
              items={acquisitionData.socialBreakdown.map(platform => ({
                id: platform.platform,
                label: platform.platform,
                metrics: {
                  users: platform.users,
                  conversionRate: platform.conversionRate,
                  engagement: platform.engagement
                }
              }))}
              metricDefinitions={[
                { key: 'users', label: 'Total Users', format: 'number' },
                { key: 'conversionRate', label: 'Conversion Rate', format: 'percentage' },
                { key: 'engagement', label: 'Engagement Level', format: 'text' }
              ]}
              maxSelections={4}
            />
          </div>
        </section>
      </div>

    </div>

    <footer class="mt-12 pt-8 border-t border-gray-200">
      <div class="text-center text-gray-500 text-sm">
        <p>Roller Analytics Dashboard ‚Ä¢ Data updated in real-time</p>
        <p class="mt-1">¬© 2025 Roller. All rights reserved.</p>
      </div>
    </footer>
  </main>

  <script>
    // Tab switching functionality
    const tabs = document.querySelectorAll('[data-tab]');
    
    function switchTab(tabId: string) {
      // Hide all tabs
      tabs.forEach(tab => {
        tab.classList.add('hidden');
      });
      
      // Show selected tab
      const selectedTab = document.querySelector(`[data-tab="${tabId}"]`);
      if (selectedTab) {
        selectedTab.classList.remove('hidden');
      }
      
      // Update URL hash without scrolling
      history.pushState(null, '', `#${tabId}`);
    }

    // Initialize tabs
    document.addEventListener('DOMContentLoaded', () => {
      // Get tab from URL hash or default to overview
      const hash = window.location.hash.slice(1) || 'overview';
      switchTab(hash);
      
      // Listen for custom tab change events from React component
      document.addEventListener('tabChange', ((e: CustomEvent) => {
        switchTab(e.detail.tabId);
      }) as EventListener);
    });

    // Handle browser back/forward
    window.addEventListener('hashchange', () => {
      const hash = window.location.hash.slice(1) || 'overview';
      switchTab(hash);
    });
  </script>
</Layout>
